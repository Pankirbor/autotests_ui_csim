import os
from datetime import datetime
from typing import Pattern

import allure

from playwright.sync_api import Page, expect
import pytest
from src.utils.logger import get_logger


logger = get_logger(__name__.upper())


class BasePage:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É,
    –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.

    Attributes:
        page (Page): –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞.

    Methods:
        visit: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é URL-–∞–¥—Ä–µ—Å.
        reload: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        check_current_url: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—É—â–∏–π URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É.
    """

    def __init__(self, page: Page) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

        Args:
            page (Page): –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞.
        """
        self.page = page

    # todo —É–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ç–æ—Ä—ã –≤ —Ñ–∞–π–ª locators.py
    def accept_cookies_if_present(self) -> None:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫—É–∫–∏, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –≤–∏–¥–µ–Ω."""
        cookies_dialog = self.page.locator(".cookie-dialog")
        accept_button = self.page.locator(".cookie-dialog button:has-text('–ü—Ä–∏–Ω—è—Ç—å')")

        cookies_dialog.wait_for(state="visible", timeout=10000)
        if cookies_dialog.is_visible():
            if accept_button.is_visible():
                accept_button.click()
                logger.info("–ö—É–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã")
                self.page.wait_for_timeout(1000)

    def visit(self, url: str) -> None:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é URL-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.

        Args:
            url (str): –ê–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏.
        """
        step = f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: '{url}'"
        with allure.step(step):
            logger.info(step)
            self.page.goto(url, wait_until="networkidle", timeout=50000)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CAPTCHA
            # captcha_type = self.debug_captcha_type()

            # # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–∂–Ω–∞—è CAPTCHA ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            # if captcha_type in [
            #     "yandex_smart_captcha",
            #     "recaptcha",
            #     "hcaptcha",
            #     "unknown",
            # ]:
            #     pytest.skip(f"CAPTCHA detected ({captcha_type}) ‚Äî skipping test in CI")
            self.accept_cookies_if_present()

    def reload(self) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∂–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ DOM.
        """
        step = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: '{self.page.url}'"
        with allure.step(step):
            logger.info(step)
            self.page.reload(wait_until="domcontentloaded")

    def check_current_url(self, expected_url: Pattern[str]) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—É—â–∏–π URL —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.

        Args:
            expected_url (Pattern[str]): –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ URL.
        """
        step = f"Checking that current url matches pattern '{expected_url.pattern}'"
        with allure.step(step):
            logger.info(step)
            expect(self.page).to_have_url(expected_url)

    def debug_captcha_type(self):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø CAPTCHA –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏.
        –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö CAPTCHA ‚Äî –ª–æ–≥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è –¥–µ–±–∞–≥–∞.
        """
        page = self.page

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Yandex SmartCaptcha (–ø–æ —Ç–≤–æ–∏–º –ª–æ–∫–∞—Ç–æ—Ä–∞–º)
        smart_captcha_container = "//div[contains(@class, 'smart-captcha')]"
        smart_captcha_iframe = "//iframe[@data-testid='backend-iframe']"

        if (
            page.locator(smart_captcha_container).count() > 0
            or page.locator(smart_captcha_iframe).count() > 0
        ):
            print("‚ö†Ô∏è Yandex SmartCaptcha detected ‚Äî cannot bypass by clicking")
            self._save_captcha_artifacts("yandex_smart_captcha")
            return "yandex_smart_captcha"

        # 2. Google reCAPTCHA
        if page.locator("iframe[src*='google.com/recaptcha']").count() > 0:
            print("‚ö†Ô∏è reCAPTCHA detected ‚Äî cannot bypass by clicking")
            self._save_captcha_artifacts("recaptcha")
            return "recaptcha"

        # 3. hCaptcha
        if page.locator("iframe[src*='hcaptcha']").count() > 0:
            print("‚ö†Ô∏è hCaptcha detected ‚Äî cannot bypass by clicking")
            self._save_captcha_artifacts("hcaptcha")
            return "hcaptcha"

        # 4. –ü—Ä–æ—Å—Ç–∞—è –≥–∞–ª–æ—á–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å)
        simple_selectors = [
            "input#human-verify",
            "label:has-text('not a robot')",
            "input[name='robot_check']",
            "#simple-human-check",
            "input[type='checkbox'][id*='robot']",
        ]

        for selector in simple_selectors:
            if page.locator(selector).count() > 0:
                try:
                    page.locator(selector).check(timeout=3000)
                    print(f"‚úÖ Simple CAPTCHA checkbox clicked: {selector}")
                    return "simple_checkbox"
                except Exception as e:
                    print(f"‚ùå Failed to click simple CAPTCHA {selector}: {e}")

        # 5. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è CAPTCHA ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        print("‚ùì Unknown CAPTCHA ‚Äî saving page state for debugging")
        self._save_captcha_artifacts("unknown")

        return "unknown"

    def _save_captcha_artifacts(self, captcha_type: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç, HTML –∏ –ª–æ–≥–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ CAPTCHA.
        –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏–∑ GitHub Actions.
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        artifact_dir = "artifacts/captcha"
        os.makedirs(artifact_dir, exist_ok=True)

        # –ò–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ CAPTCHA –∏ –≤—Ä–µ–º–µ–Ω–∏
        prefix = f"{artifact_dir}/{captcha_type}_{timestamp}"

        try:
            # 1. –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            screenshot_path = f"{prefix}_screenshot.png"
            self.page.screenshot(path=screenshot_path, full_page=True)
            print(f"üì∏ Screenshot saved: {screenshot_path}")

            # 2. HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 10–ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª–æ–≥–∞)
            html = self.page.content()
            print(f"üìÑ Page HTML fragment (first 2000 chars):\n{html[:2000]}")

            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π HTML –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            html_path = f"{prefix}_page.html"
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(html)
            print(f"üíæ Full HTML saved: {html_path}")

            # 4. –õ–æ–≥–∏—Ä—É–µ–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            print(f"üåê Page URL: {self.page.url}")
            print(f"üîñ Page Title: {self.page.title()}")

        except Exception as e:
            print(f"‚ùå Failed to save artifacts: {e}")
